f2016<- predict(fit_complete, n.ahead=50 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
f2016
f2016<- predict(fit_complete, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
f2016
f2016$fitted
f2016
f2016$fit
f2016
library(tsbox)
install.packages("tsbox")
library(tsbox)
df<-ts_df(f2016)
df
weatherdata<-cbind.data.frame(weatherdata,df$value)
weatherdata
df
df$value[id='fit']
weatherdata<-cbind.data.frame(weatherdata,df$value[1:123])
weatherdata
weatherdata<- read.table("/Users/ashokholla/Documents/Georgia\ Tech/Assignments/ISYE-6501/week4/temps.txt", header = TRUE)
weatherdata<-cbind.data.frame(weatherdata,df$value[1:123])
weatherdata
colnames(weatherdata[22])<-c("X2016")
weatherdata
colnames(weatherdata)[22]<-"X2016"
weatherdata
#Calculate the mean for the summer months July, August and 15 days of september first 77 rows
weathermeans<-colMeans(weatherdata[1:77,-1])
summermean<-mean(weathermeans)
#mean of the autumn months
sep15_oct_means<-colMeans(weatherdata[77:123,-1])
mean(sep15_oct_means)
#Calculate the standard deviation for the summer months July, August and 15 days of september first 77 rows
Sdmatrix<- apply(weatherdata[1:77,-1],2,sd)
Sdmatrix
meanSd<-mean(Sdmatrix)
# Average SD for Fall months
mean(apply(weatherdata[77:123,-1],2,sd))
#Calculate Xt-Mu for every year
xt_mu<-apply(weatherdata[,-1],1,'-',weathermeans)
#reverse signs i.e. mu-Xt since we are tracking decrease
mu_xt <- (apply(xt_mu,1,'*',-1))
#Lets set C = 0.5 of SD
C<-Sdmatrix*0.5
# subract C
mu_xt_c <-apply(mu_xt,1,'-',C)
mu_xt_c<-t(mu_xt_c)
#dimensions of the matrix for declaring St matrix
m<-dim(mu_xt)[1]
n<-dim(mu_xt)[2]
#dimensions of the matrix for declaring St matrix
m<-dim(mu_xt)[1]
n<-dim(mu_xt)[2]
```{r, echo=FALSE}
#St matrix declaration
St<-matrix(rep(0),nrow=m,ncol=n)
#Calculate St, cusum
for( j in 1:n){
St_1<-0
for(i in 1:m){
St_1<- max(0,St_1+as.numeric(mu_xt_c[i,j]))
St[i,j]<-St_1
}
}
#set column names and also append the "day of the month" information
colnames(St)<-colnames(weatherdata[,-1])
St<-cbind(as.matrix(weatherdata[,1]),St)
colnames(St)[1] <- "Day"
Thold<-(Sdmatrix * 7)
# Thresholds for each year
Thold
#Find unofficial summer ends for each year
summermat<-matrix(nrow=2,ncol=n)
dim(summermat)
colnames(summermat)<-colnames(weatherdata[,-1])
#recalculate the dimensions
ms<-dim(St)[1]
ns<-dim(St)[2]
#Find the tip-over point i.e. the change in temperature for every year
# go column by column, i.e. year by year
for (j in 2:ns){
# go row by row, i.e. day by day
for(i in 1:ms){
dayVal<-as.numeric(St[i,j])
Th<-Thold[j-1]
if( dayVal > Th ) {
summermat[1,j-1]<- St[i,1]
summermat[2,j-1]<- weatherdata[i,j]
break
}
}
}
```{r}
# When Summer unofficially ends
summermat<-t(summermat)
colnames(summermat)<-c("Day","Temperature")
summermat
arima_model<-auto.arima(weatherts_train)
arima_model<-auto.arima(weatherts_train)
test.fit<-predict(arima_model,n.ahead = length(weatherts_test))
test.fit<-predict(arima_model,n.ahead = length(weatherts_test))
rmse(weatherts_test,test.fit$pred)
rmse(weatherts_test,test.fit$pred)
cusum_weather <- function(weatherdata) {
#Calculate the mean for the summer months July, August and 15 days of september first 77 rows
weathermeans<-colMeans(weatherdata[1:77,-1])
summermean<-mean(weathermeans)
#mean of the autumn months
sep15_oct_means<-colMeans(weatherdata[77:123,-1])
mean(sep15_oct_means)
#Calculate the standard deviation for the summer months July, August and 15 days of september first 77 rows
Sdmatrix<- apply(weatherdata[1:77,-1],2,sd)
Sdmatrix
meanSd<-mean(Sdmatrix)
# Average SD for Fall months
mean(apply(weatherdata[77:123,-1],2,sd))
cusum_weather <- function(weatherdata) {
#Calculate the mean for the summer months July, August and 15 days of september first 77 rows
weathermeans<-colMeans(weatherdata[1:77,-1])
summermean<-mean(weathermeans)
#Calculate the standard deviation for the summer months July, August and 15 days of september first 77 rows
Sdmatrix<- apply(weatherdata[1:77,-1],2,sd)
meanSd<-mean(Sdmatrix)
#we are trying to find when unofficial summer ends,i.e. decreasing change, so St=max(0,S{t-1}+(mu-xt-C))
#Calculate Xt-Mu for every year
xt_mu<-apply(weatherdata[,-1],1,'-',weathermeans)
#reverse signs i.e. mu-Xt since we are tracking decrease
mu_xt <- (apply(xt_mu,1,'*',-1))
#Lets set C = 0.5 of SD
C<-Sdmatrix*0.5
# subract C
mu_xt_c <-apply(mu_xt,1,'-',C)
mu_xt_c<-t(mu_xt_c)
#dimensions of the matrix for declaring St matrix
m<-dim(mu_xt)[1]
n<-dim(mu_xt)[2]
#St matrix declaration
St<-matrix(rep(0),nrow=m,ncol=n)
#Calculate St, cusum
for( j in 1:n){
St_1<-0
for(i in 1:m){
St_1<- max(0,St_1+as.numeric(mu_xt_c[i,j]))
St[i,j]<-St_1
}
}
#set column names and also append the "day of the month" information
colnames(St)<-colnames(weatherdata[,-1])
St<-cbind(as.matrix(weatherdata[,1]),St)
colnames(St)[1] <- "Day"
#Lets choose an Threshold of 7 * Standard Deviation
Thold<-(Sdmatrix * 7)
#Find unofficial summer ends for each year
summermat<-matrix(nrow=2,ncol=n)
dim(summermat)
colnames(summermat)<-colnames(weatherdata[,-1])
#recalculate the dimensions
ms<-dim(St)[1]
ns<-dim(St)[2]
#Find the tip-over point i.e. the change in temperature for every year
# go column by column, i.e. year by year
for (j in 2:ns){
# go row by row, i.e. day by day
for(i in 1:ms){
dayVal<-as.numeric(St[i,j])
Th<-Thold[j-1]
if( dayVal > Th ) {
summermat[1,j-1]<- St[i,1]
summermat[2,j-1]<- weatherdata[i,j]
break
}
}
}
# When Summer unofficially ends
summermat<-t(summermat)
colnames(summermat)<-c("Day","Temperature")
return(summermat)
}
cusum_weather(weatherdata)
arima_model<-auto.arima(weatherts)
futurVal <- forecast(arima_model,h=123, level=c(99.5))
plot(futurVal)
f2016<- predict(arima_model, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(arima_model, f2016)
plot(f2016)
f2016<- predict(arima_model, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(f2016)
f2016
plot(f2016$pred)
plot(arima_model,f2016$pred)
arima_model
plot(fitted(arima_model),f2016$pred)
plot(f2016$pred)
df<-ts_df(f2016$pred)
df
#Append the fitted values to the original data
weatherdata<-cbind.data.frame(weatherdata,df$value)
weatherdata<- read.table("/Users/ashokholla/Documents/Georgia\ Tech/Assignments/ISYE-6501/week4/temps.txt", header = TRUE)
f2016<- predict(arima_model, n.ahead=123 , prediction.interval = TRUE)
plot(f2016$pred)
#inlcude tsbox for converting functions
library(tsbox)
df<-ts_df(f2016$pred)
#Dataframe
df
#Append the fitted values to the original data
weatherdata<-cbind.data.frame(weatherdata,df$value)
weatherdata<- read.table("/Users/ashokholla/Documents/Georgia\ Tech/Assignments/ISYE-6501/week4/temps.txt", header = TRUE)
head(weatherdata)
#Append the fitted values to the original data
weatherdata_arima<-cbind.data.frame(weatherdata,df$value)
colnames(weatherdata_arima)[22]<-"X2016"
weatherdata_arima
cusum_weather(weatherdata_arima)
f2016_arima<- predict(arima_model, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(f2016_arima$pred)
futurVal <- forecast(arima_model,h=123, level=c(99.5))
futurVal
plot(futurVal)
plot(f2016_arima$pred)
cu<-cusum(weatherdata_arima, decision.interval = 5, se.shift = 1)
library(qcc)
cu<-cusum(weatherdata_arima, decision.interval = 5, se.shift = 1)
cu<-cusum(weatherdata_arima, decision.interval = 7, se.shift = 1)
cu<-cusum(weatherdata_arima, decision.interval = 10, se.shift = 1)
components.ts.SeasonAdj <- weatherts_train - components.ts$seasonal
plot.ts(components.ts.SeasonAdj)
components.ts.SeasonAdj <- weatherts_train - components.ts$seasonal
plot.ts(components.ts.SeasonAdj)
components.ts.SeasonAdj <- weatherts_train / components.ts$seasonal
plot.ts(components.ts.SeasonAdj)
decompose(components.ts.SeasonAdj)
decompose(components.ts.SeasonAdj)
plot(decompose(components.ts.SeasonAdj))
plot(decompose(components.ts.SeasonAdj),col = "red", lwd = 2)
plot.ts(components.ts.SeasonAdj)
plot(decompose(components.ts.SeasonAdj),col = "red", lwd = 2)
components.ts.SeasonAdj <- weatherts_train - components.ts$seasonal
plot.ts(components.ts.SeasonAdj)
plot(decompose(components.ts.SeasonAdj),col = "red", lwd = 2)
components.ts.SeasonAdj <- weatherts_train /components.ts$seasonal
plot.ts(components.ts.SeasonAdj)
plot(decompose(components.ts.SeasonAdj),col = "red", lwd = 2)
plot.ts(components.ts$seasonal)
model <- HoltWinters(components.ts.SeasonAdj)
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
additive_rmse <-rmse(weatherts_test,test.fit)
printf("Additive Seasonality RMSE = %s",additive_rmse)
model <- HoltWinters(components.ts.SeasonAdj, seasonal = "multiplicative", beta = FALSE)
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf("Multiplicative Seasonality RMSE = %s",mult_rmse)
model <- HoltWinters(components.ts.SeasonAdj, gamma=NULL)
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
additive_rmse <-rmse(weatherts_test,test.fit)
printf("Additive Seasonality RMSE = %s",additive_rmse)
model <- HoltWinters(components.ts.SeasonAdj, gamma=NULL,seasonal = "multiplicative", beta = FALSE)
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf("Multiplicative Seasonality RMSE = %s",mult_rmse)
components.ts.SeasonAdj <- weatherts_train /components.ts$seasonal
trend_air = ma(weatherts_train, order = 123, centre = T)
plot((weatherts_train))
lines(trend_air)
plot(as.ts(trend_air))
plot((weatherts_train))
lines(trend_weather, col="red")
plot((weatherts_train))
lines(trend_weather, color="red")
trend_weather = ma(weatherts_train, order = 123, centre = T)
plot((weatherts_train))
lines(trend_weather, color="red")
plot((weatherts_train))
lines(trend_weather, color="red")
plot((weatherts_train))
lines(trend_weather, col="red")
plot(as.ts(trend_weather))
detrend_weather = weatherts_train - trend_weather
plot(as.ts(detrend_weather))
detrend_weather = weatherts_train /trend_weather
plot(as.ts(detrend_weather))
detrend_weather = weatherts_train /as.ts(trend_weather)
plot(as.ts(detrend_weather))
#compute the average seasonality
m_weather = t(matrix(data = detrend_weather, nrow = 123))
seasonal_weather = colMeans(m_weather, na.rm = T)
plot(as.ts(rep(seasonal_weather,123)))
library(forecast)
trend_weather = ma(weatherts_train, order = 123, centre = T)
plot((weatherts_train))
lines(trend_weather, col="red")
plot(as.ts(trend_weather))
#Lets de-trend to expose the seasonality
detrend_weather = weatherts_train / as.ts(trend_weather)
plot(as.ts(detrend_weather))
model <- HoltWinters(weatherts_train, seasonal = "multiplicative", beta = FALSE)
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf("Multiplicative Seasonality RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, gamma=NULL,seasonal = "multiplicative", beta = FALSE)
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf("Multiplicative Seasonality RMSE = %s",mult_rmse)
components.ts.SeasonAdj <- weatherts_train /components.ts$seasonal
plot.ts(components.ts.SeasonAdj)
plot.ts(components.ts$seasonal)
plot(decompose(components.ts.SeasonAdj),col = "red", lwd = 2)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative")
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative")
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
weatherdata<- read.table("/Users/ashokholla/Documents/Georgia\ Tech/Assignments/ISYE-6501/week4/temps.txt", header = TRUE)
head(weatherdata)
#Convert to vector before converting to a time series object
weatherdata_vec<-as.vector(unlist(weatherdata[,-1]))
m<-dim(weatherdata)[1]
n<-dim(weatherdata)[2]
#Lets choose years 1996-2012 as training data
#1996-2012
ntrain=(n-4)*m
train<-weatherdata_vec[1:ntrain]
#remaining is test data
test<-tail(weatherdata_vec, -(ntrain))
#ts object for the entire dataset
weatherts <- ts(weatherdata_vec, start=c(1996, 7), frequency = 123)
#1996-2012
weatherts_train <- window(weatherts, end = c(2013, 10))
#2013 onwards, test data to verify the accuracy
weatherts_test <- window(weatherts, start = c(2014, 7))
printf <- function(...)print(sprintf(...))
require(graphics)
library(ModelMetrics)
#Look at the seasonality and trend of the data
library(forecast)
components.ts = decompose(weatherts_train)
plot(components.ts)
library(forecast)
trend_weather = ma(weatherts_train, order = 123, centre = T)
plot((weatherts_train))
lines(trend_weather, col="red")
plot(as.ts(trend_weather))
model <- HoltWinters(weatherts_train, seasonal = "multiplicative")
weatherts.fitted<-model$fitted
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative")
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative", alpha=NULL)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative", beta=NULL)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative", gamma=NULL)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "additive", gamma=NULL)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative", gamma=NULL)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, seasonal = "multiplicative", gamma=FALSE, beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, gamma=FALSE, beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
model <- HoltWinters(weatherts_train, gamma=NULL, beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
mult_rmse <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",mult_rmse)
# fit a non-seasonal exponential smoothing model
model <- HoltWinters(weatherts_train, gamma=FALSE, beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
rmse_val <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",rmse_val)
# fit a multiplicative seasonal exponential smoothing model
model <- HoltWinters(weatherts_train, gamma=NULL, seasonal = "mult", beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
rmse_val <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",rmse_val)
# fit a multiplicative seasonal exponential smoothing model
model <- HoltWinters(weatherts_train, gamma=NULL, seasonal = "mult", beta=NULL)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
rmse_val <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",rmse_val)
# fit a multiplicative seasonal exponential smoothing model
model <- HoltWinters(weatherts_train, gamma=NULL, seasonal = "mult", beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
rmse_val <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",rmse_val)
# fit a non-seasonal exponential smoothing model
model <- HoltWinters(weatherts_train, gamma=FALSE, beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
rmse_val <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",rmse_val)
fit_complete <- HoltWinters(weatherts,gamma=FALSE, beta=FALSE))
fit_complete <- HoltWinters(weatherts, gamma=FALSE, beta=FALSE)
f2016<- predict(fit_complete, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
library(tsbox)
df<-ts_df(f2016)
#Append the fitted values to the original data
weatherdata_hw<-cbind.data.frame(weatherdata,df$value[1:123])
colnames(weatherdata_hw)[22]<-"X2016"
head(weatherdata_hw)
cusum_weather(weatherdata_hw)
fit_complete <- HoltWinters(weatherts, gamma=FALSE, beta=FALSE)
f2016<- predict(fit_complete, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
fit_complete <- HoltWinters(weatherts, gamma=FALSE, beta=FALSE)
f2016<- predict(fit_complete, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
library(tsbox)
df<-ts_df(f2016)
df
fit_complete <- HoltWinters(weatherts, gamma=NULL, beta=FALSE)
f2016<- predict(fit_complete, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
library(tsbox)
df<-ts_df(f2016)
df
# fit a multiplicative seasonal exponential smoothing model
model <- HoltWinters(weatherts_train, gamma=NULL, seasonal = "mult", beta=FALSE)
test.fit<-predict(model,n.ahead = length(weatherts_test))
#calculate the RMSE
rmse_val <- rmse(weatherts_test,test.fit)
printf(" RMSE = %s",rmse_val)
fit_complete <- HoltWinters(weatherts, ggamma=NULL, seasonal = "mult",beta=FALSE)
require(graphics)
fit_complete <- HoltWinters(weatherts, ggamma=NULL, seasonal = "mult",beta=FALSE)
fit_complete <- HoltWinters(weatherts, gamma=NULL, seasonal = "mult",beta=FALSE)
f2016<- predict(fit_complete, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(fit_complete, f2016)
library(tsbox)
df<-ts_df(f2016)
#Append the fitted values to the original data
weatherdata_hw<-cbind.data.frame(weatherdata,df$value[1:123])
colnames(weatherdata_hw)[22]<-"X2016"
head(weatherdata_hw)
cusum_weather(weatherdata_hw)
arima_model<-auto.arima(weatherts_train)
arima_model<-auto.arima(weatherts_train)
test.fit<-predict(arima_model,n.ahead = length(weatherts_test))
rmse(weatherts_test,test.fit$pred)
arima_model<-auto.arima(weatherts)
f2016_arima<- predict(arima_model, n.ahead=123 , prediction.interval = TRUE)
require(graphics)
plot(f2016_arima$pred)
#inlcude tsbox for converting functions
library(tsbox)
df<-ts_df(f2016_arima$pred)
#Append the fitted values to the original data
weatherdata_arima<-cbind.data.frame(weatherdata,df$value)
colnames(weatherdata_arima)[22]<-"X2016"
head(weatherdata_arima)
